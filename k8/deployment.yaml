apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: cloud-config-server
  name: cloud-config-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cloud-config-server
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: cloud-config-server
    spec:
      containers:
        - image: skobbekaduawa/microdev:cloud-config-server
          name: cloud-config-server
          resources: {}
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: cloud-config-server
  name: cloud-config-server
spec:
  ports:
    - name: 8888-8888
      port: 8888
      protocol: TCP
      targetPort: 8888
  selector:
    app: cloud-config-server
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: api-gateway
  name: api-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: api-gateway
    spec:
      containers:
        - image: skobbekaduawa/microdev:api-gateway
          name: api-gateway
          resources: {}
          env:
            - name: EUREKA_CLIENT_ENABLED
              value: "false"
            - name: SPRING_CLOUD_KUBERNETES_ENABLED
              value: "true"
            - name: SPRING_CLOUD_KUBERNETES_RELOAD_ENABLED
              value: "true"
            - name: SPRING_AUTOCONFIGURE_EXCLUDE
              value: "org.springframework.cloud.netflix.eureka.loadbalancer.LoadBalancerEurekaAutoConfiguration"
            - name: "logging.level.org.springframework.cloud.kubernetes"
              value: "TRACE"
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: api-gateway
  name: api-gateway
spec:
  ports:
    - name: 9099-9099
      port: 9099
      protocol: TCP
      targetPort: 9099
  selector:
    app: api-gateway
  type: LoadBalancer
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: auditor
  name: auditor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auditor
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: auditor
    spec:
      containers:
        - image: skobbekaduawa/microdev:auditor
          name: auditor
          resources: {}
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: auditor
  name: auditor
spec:
  ports:
    - name: 9097-9097
      port: 9097
      protocol: TCP
      targetPort: 9097
  selector:
    app: auditor
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: auth-service
  name: auth-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-service
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: auth-service
    spec:
      containers:
        - image: skobbekaduawa/microdev:auth-service
          name: auth-service
          resources: {}
          env:
            - name: EUREKA_CLIENT_ENABLED
              value: "false"
            - name: SPRING_CLOUD_KUBERNETES_ENABLED
              value: "true"
            - name: SPRING_CLOUD_KUBERNETES_RELOAD_ENABLED
              value: "true"
            - name: SPRING_AUTOCONFIGURE_EXCLUDE
              value: "org.springframework.cloud.netflix.eureka.loadbalancer.LoadBalancerEurekaAutoConfiguration"
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: auth-service
  name: auth-service
spec:
  ports:
    - name: 9095-9095
      port: 9095
      protocol: TCP
      targetPort: 9095
  selector:
    app: auth-service
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: customer-core
  name: customer-core
spec:
  replicas: 1
  selector:
    matchLabels:
      app: customer-core
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: customer-core
    spec:
      containers:
        - image: skobbekaduawa/microdev:customer-core
          name: customer-core
          resources: {}
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: customer-core
  name: customer-core
spec:
  ports:
    - name: 8083-8083
      port: 8083
      protocol: TCP
      targetPort: 8083
  selector:
    app: customer-core
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: customer-service
  name: customer-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: customer-service
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: customer-service
    spec:
      containers:
        - image: skobbekaduawa/microdev:customer-service
          name: customer-service
          resources: {}
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: customer-service
  name: customer-service
spec:
  ports:
    - name: 8082-8082
      port: 8082
      protocol: TCP
      targetPort: 8082
  selector:
    app: customer-service
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: zookeeper
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: zookeeper
    spec:
      containers:
        - image: confluentinc/cp-zookeeper:latest
          name: zookeeper
          resources: {}
          env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            - name: ZOOKEEPER_TICK_TIME
              value: "2000"
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: zookeeper
  name: zookeeper
spec:
  ports:
    - name: 2181-2181
      port: 2181
      protocol: TCP
      targetPort: 2181
  selector:
    app: zookeeper
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: kafka-server
  name: kafka-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-server
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: kafka-server
    spec:
      containers:
        - image: wurstmeister/kafka:latest
          name: kafka-server
          ports:
            - containerPort: 9092
          resources: {}
          env:
            - name: KAFKA_ADVERTISED_HOST_NAME
              value: "kafka-server"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka-server.default.svc.cluster.local:9092"
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://:9092"

status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: kafka-server
  name: kafka-server
spec:
  ports:
    - name: 9092-9092
      port: 9092
      protocol: TCP
      targetPort: 9092
  selector:
    app: kafka-server
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: redis
    spec:
      containers:
        - image: redis:latest
          name: redis
          resources: {}
          env:
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: redis
  name: redis
spec:
  ports:
    - name: 6379-6379
      port: 6379
      protocol: TCP
      targetPort: 6379
  selector:
    app: redis
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: keycloak
  name: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: keycloak
    spec:
      containers:
        - image: jboss/keycloak:16.1.1
          name: keycloak
          resources: {}
          env:
            - name: DB_VENDOR
              value: h2
            - name: KEYCLOAK_USER
              value: admin
            - name: KEYCLOAK_PASSWORD
              value: admin
      volumes:
        - name: json-import
          configMap:
            name: keycloak
            items:
              - key: realm-export.json
                path: realm-export.json
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: keycloak
  name: keycloak
spec:
  ports:
    - name: 8080-8080
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: keycloak
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: postgres
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: postgres
    spec:
      containers:
        - image: postgres:latest
          name: postgres
          resources: {}
          env:
            - name: POSTGRES_DB
              value: "postgres_database"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "postgres"
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: postgres
  name: postgres
spec:
  ports:
    - name: 5432-5432
      port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    app: postgres
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: v1
kind: List
items:
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: spring-cloud-kubernetes-discoveryserver
      name: spring-cloud-kubernetes-discoveryserver
    spec:
      ports:
        - name: http
          port: 80
          targetPort: 8761
      selector:
        app: spring-cloud-kubernetes-discoveryserver
      type: ClusterIP
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app: spring-cloud-kubernetes-discoveryserver
      name: spring-cloud-kubernetes-discoveryserver
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      labels:
        app: spring-cloud-kubernetes-discoveryserver
      name: spring-cloud-kubernetes-discoveryserver:view
    roleRef:
      kind: Role
      apiGroup: rbac.authorization.k8s.io
      name: namespace-reader
    subjects:
      - kind: ServiceAccount
        name: spring-cloud-kubernetes-discoveryserver
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      namespace: default
      name: namespace-reader
    rules:
      - apiGroups: ["", "extensions", "apps"]
        resources: ["services", "endpoints"]
        verbs: ["get", "list", "watch"]
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: spring-cloud-kubernetes-discoveryserver-deployment
    spec:
      selector:
        matchLabels:
          app: spring-cloud-kubernetes-discoveryserver
      template:
        metadata:
          labels:
            app: spring-cloud-kubernetes-discoveryserver
        spec:
          serviceAccount: spring-cloud-kubernetes-discoveryserver
          containers:
            - name: spring-cloud-kubernetes-discoveryserver
              image: springcloud/spring-cloud-kubernetes-discoveryserver:2.1.0-M3
              imagePullPolicy: IfNotPresent
              readinessProbe:
                httpGet:
                  port: 8761
                  path: /actuator/health/readiness
              livenessProbe:
                httpGet:
                  port: 8761
                  path: /actuator/health/liveness
              ports:
                - containerPort: 8761
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
  namespace: default
  labels:
    app: prometheus-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-server
  template:
    metadata:
      labels:
        app: prometheus-server
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus
          args:
            - "--storage.tsdb.retention.time=12h"
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus/"
          ports:
            - containerPort: 9090
          resources:
            requests:
              cpu: 500m
              memory: 500M
            limits:
              cpu: 1
              memory: 1Gi
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
            - name: prometheus-storage-volume
              mountPath: /prometheus/
      volumes:
        - name: prometheus-config-volume
          configMap:
            defaultMode: 420
            name: prometheus-server-conf

        - name: prometheus-storage-volume
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: default
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port:   '9090'
spec:
  selector:
    app: prometheus-server
  type: NodePort
  ports:
    - port: 9090
      targetPort: 9090
      nodePort: 30000